// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RustChallengeRenderer can render challenge 1`] = `
"
      Hello, User!

      fn main() {
        let _b_input: Vec<&str> = vec![
          r###\\"1\\"###,
r###\\"2\\"###,
r###\\"3\\"###
        ];
        for tc in _b_input {
          let json = {
            let result: i64 = parse_str(tc);
            serde_json::json!(result)
          };

          println!(
            \\"{boundary_start}{result:?}{boundary_end}\\",
            boundary_start = \\"B_START\\",
            boundary_end = \\"B_END\\",
            result = json.to_string()
          );
        }
      }
    "
`;

exports[`RustChallengeRenderer can render default input 1`] = `
"
      fn parse_str(input: &str) -> i64 {
        todo!()
      }
    "
`;

exports[`RustChallengeRenderer can serialise a dictionary 1`] = `
"
      USER_CODE_HERE

      fn main() {
        let _b_input: Vec<HashMap<i64, i64>> = vec![
          {
      use std::collections::HashMap;
      let mut inner: HashMap<i64, i64> = HashMap::new();
      inner.insert(1, 1);
inner.insert(2, 2);
inner.insert(3, 3);
      inner
    }
        ];
        for tc in _b_input {
          let json = {
            let result: HashMap<i64, i64> = a_dictionary(tc);
            serde_json::json!(result.into_iter().collect::<Vec<(i64, i64)>>())
          };

          println!(
            \\"{boundary_start}{result:?}{boundary_end}\\",
            boundary_start = \\"B_START\\",
            boundary_end = \\"B_END\\",
            result = json.to_string()
          );
        }
      }
    "
`;

exports[`RustChallengeRenderer can serialise a linked list 1`] = `
"
      USER_CODE_HERE

      fn main() {
        let _b_input: Vec<LinkedList<i64>> = vec![
          {
      use std::collections::LinkedList;
      let mut inner: LinkedList<i64> = LinkedList::new();
      inner.push_back(1);
inner.push_back(2);
inner.push_back(3);
      inner
    }
        ];
        for tc in _b_input {
          let json = {
            let result: LinkedList<i64> = a_linked_list(tc);
            serde_json::json!({
      \\"B__linkedList\\": {
        \\"inner\\": result,
      }
    })
          };

          println!(
            \\"{boundary_start}{result:?}{boundary_end}\\",
            boundary_start = \\"B_START\\",
            boundary_end = \\"B_END\\",
            result = json.to_string()
          );
        }
      }
    "
`;
